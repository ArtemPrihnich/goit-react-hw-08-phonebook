{"version":3,"file":"static/js/274.223638f9.chunk.js","mappings":"mPAKe,SAASA,IACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,cAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,MAAa,SAATf,EACOC,EAAQc,GAEN,UAATf,EACOG,EAASY,GAEP,aAATf,EACOK,EAAYU,QADvB,CAGH,EAeD,OACI,0BACI,kBAAMC,SAfO,SAACH,GAClBA,EAAEI,iBAMFP,GAASQ,EAAAA,EAAAA,IAAa,CAAElB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KACrCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACf,EAIO,WACI,kBAAOc,QAASb,EAAhB,mBACA,kBACIc,KAAK,OACLC,GAAIf,EACJN,KAAK,OACLe,MAAOf,EACPsB,SAAUV,KAEd,kBAAOO,QAASX,EAAhB,oBACA,kBACIY,KAAK,OACLC,GAAIb,EACJR,KAAK,QACLe,MAAOb,EACPoB,SAAUV,KAEd,kBAAOO,QAASV,EAAhB,uBACA,kBACIW,KAAK,OACLC,GAAIZ,EACJT,KAAK,WACLe,MAAOX,EACPkB,SAAUV,KAEd,mBAAQQ,KAAK,SAAb,wBAIf,C,uDCxEM,IAkBIb,EAAS,eAACgB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/RegisterForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { nanoid } from 'nanoid'\nimport { registerUser } from 'redux/auth/auth-operations'\n\nexport default function RegisterForm() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const nameInputId = nanoid()\n    const emailInputId = nanoid()\n    const passwordInputId = nanoid()\n\n    const dispatch = useDispatch()\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'name') {\n            return setName(value)\n        }\n        if (name === 'email') {\n            return setEmail(value)\n        }\n        if (name === 'password') {\n            return setPassword(value)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        // const data = {\n        //     name,\n        //     email,\n        //     password\n        // }\n        dispatch(registerUser({ name, email, password }))\n        setName('')\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor={nameInputId}>Name</label>\n                <input\n                    type=\"text\"\n                    id={nameInputId}\n                    name='name'\n                    value={name}\n                    onChange={handleChange}\n                />\n                <label htmlFor={emailInputId}>Email</label>\n                <input\n                    type=\"text\"\n                    id={emailInputId}\n                    name='email'\n                    value={email}\n                    onChange={handleChange}\n                />\n                <label htmlFor={passwordInputId}>Password</label>\n                <input\n                    type=\"text\"\n                    id={passwordInputId}\n                    name='password'\n                    value={password}\n                    onChange={handleChange}\n                />\n                <button type='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","handleChange","e","currentTarget","value","onSubmit","preventDefault","registerUser","htmlFor","type","id","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}