{"version":3,"file":"static/js/88.b14fdd52.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactsForm/ContactsForm.jsx","components/Loader/Loader.jsx","components/ErrorNotify/ErrorNotify.jsx","components/ContactsList/ContactsList.jsx","redux/filter/filter-selectors.js","components/ContactsFilter/ContactsFilter.jsx","pages/Contacts.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["export const getIsLoading = state => state.contacts.isLoading\n\nexport const getItems = state => state.contacts.items\n\nexport const getError = state => state.contacts.error\n\nexport const getFilteredContacts = ({ contacts, filter }) => {   \n  // console.log(filter)\n  const contactss = contacts.items\n  const filterr = filter\n    if (!filterr) {\n      return contactss\n    }\n\n  const filteredContacts = contactss.filter(({ name, phone }) => {\n      const result = name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()) || phone.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n      return result\n    })\n\n    return filteredContacts\n  // return []\n}","import React, { useState } from 'react'\nimport { nanoid } from 'nanoid'\n// import { Button, Form, Input, Label } from './ContactsForm.styled';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\n// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nexport default function ContactsForm() {\n    const contacts = useSelector(getFilteredContacts)\n    const dispatch = useDispatch()\n\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n\n    const contactNameInpuId = nanoid();\n    const contactNumberInputId = nanoid();\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'name') {\n            return setName(value)\n        }\n        if (name === 'number') {\n            return setNumber(value)\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onAddContact({ name, number })\n    }\n\n    const onAddContact = (contact) => {\n        if (onDuplicatingName(contact)) {\n            // return Notify.failure(`This contact: (${contact.name}) is already in your contact book`);\n            return alert('Contact now da')\n        }\n\n        dispatch(addContact(contact))\n        setName('')\n        setNumber('')\n    }\n\n    const onDuplicatingName = ({ name }) => {\n        const result = contacts.find(contact => {\n            return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n        })\n        return result\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label htmlFor={contactNameInpuId}>Name</label>\n            <input\n                type=\"text\"\n                name=\"name\"\n                value={name}\n                id={contactNameInpuId}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                placeholder='Taras Shevchenko'\n                onChange={handleChange}\n            />\n            <label htmlFor={contactNumberInputId}>Phone Number</label>\n            <input\n                type=\"tel\"\n                name=\"number\"\n                value={number}\n                id={contactNumberInputId}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                placeholder='+38 (012) 345 67 89'\n                onChange={handleChange}\n            />\n            <button>Add Contact</button>\n        </form>\n    )\n}\n\n","import React from 'react'\n// import { Item } from './Loader.styled'\n\nexport default function Loader() {\n    return (\n        <>\n            <li>Loading...</li>\n        </>\n    )\n}\n","import React from 'react'\n// import { Item } from './ErrorNotify.styled'\nimport { useSelector } from \"react-redux\";\nimport { getError } from 'redux/contacts/contacts-selectors';\n\nexport default function ErrorNotify() {\n    const error = useSelector(getError)\n\n    return (\n        <>\n            <li>Oops, something went wrong :( {error}</li>\n        </>\n    )\n}\n","import { useEffect } from 'react'\n// import { Button, Item, List } from './ContactsList.styled'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchContacts } from \"redux/contacts/contacts-operations\";\nimport { getError, getFilteredContacts, getIsLoading } from 'redux/contacts/contacts-selectors';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport Loader from 'components/Loader/Loader';\nimport ErrorNotify from 'components/ErrorNotify/ErrorNotify';\n\nexport default function ContactsList() {\n    const contacts = useSelector(getFilteredContacts)\n    const loading = useSelector(getIsLoading)\n    const error = useSelector(getError)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    const removeContact = (id) => {\n        const action = deleteContact(id);\n        dispatch(action);\n    }\n\n    return (\n        <ul>\n            {loading && <Loader />}\n            {!error && !loading && contacts?.map(({ name, phone, id }) => {\n                return (\n                    <li key={id}>{name}: {phone} <button onClick={() => removeContact(id)}>delete</button></li>\n                )\n            })}\n            {!loading && error && <ErrorNotify />}\n        </ul>\n    )\n}\n","export const getFilter = store => store.filter;","import React from 'react'\nimport { nanoid } from 'nanoid'\n// import { Box, Input, Label } from './ContactsFilter.styled'\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setFilter } from 'redux/filter/filter-slice';\n\nexport default function ContactsFilter() {\n    const filterInpuId = nanoid();\n\n    const filter = useSelector(getFilter)\n    const dispatch = useDispatch()\n\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'filter') {\n            dispatch(setFilter(value))\n        }\n    };\n    return (\n        <div>\n            <label htmlFor={filterInpuId}> Write a name for quick search</label>\n            <input type=\"text\" name='filter' id={filterInpuId} value={filter} placeholder='Enter some name ...' onChange={handleChange} />\n        </div >\n    )\n}\n","import React from 'react'\nimport ContactsForm from '../components/ContactsForm/ContactsForm';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport ContactsFilter from '../components/ContactsFilter/ContactsFilter';\n\nexport default function Contacts() {\n    return (\n        <>\n            <ContactsForm />\n            <ContactsFilter />\n            <ContactsList />\n        </>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["getIsLoading","state","contacts","isLoading","getError","error","getFilteredContacts","filter","contactss","items","name","phone","toLocaleLowerCase","includes","ContactsForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","contactNameInpuId","nanoid","contactNumberInputId","handleChange","e","currentTarget","value","onAddContact","contact","onDuplicatingName","alert","addContact","find","onSubmit","preventDefault","htmlFor","type","id","pattern","title","required","placeholder","onChange","Loader","ErrorNotify","ContactsList","loading","useEffect","fetchContacts","map","onClick","action","deleteContact","removeContact","getFilter","store","ContactsFilter","filterInpuId","setFilter","Contacts","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}