{"version":3,"file":"static/js/238.53e4b924.chunk.js","mappings":"mPAMe,SAASA,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,MAAa,UAATD,EACOX,EAASY,GAEP,aAATD,EACOT,EAAYU,QADvB,CAGH,EAcD,OACI,0BACI,kBAAMC,SAdO,SAACJ,GAClBA,EAAEK,iBAKFR,GAASS,EAAAA,EAAAA,IAAM,CAAEhB,MAAAA,EAAOE,SAAAA,KACxBD,EAAS,IACTE,EAAY,GAEf,EAIO,WACI,kBAAOc,QAASb,EAAhB,oBACA,kBACIc,KAAK,OACLC,GAAIf,EACJQ,KAAK,QACLC,MAAOb,EACPoB,SAAUX,KAEd,kBAAOQ,QAASX,EAAhB,uBACA,kBACIY,KAAK,OACLC,GAAIb,EACJM,KAAK,WACLC,MAAOX,EACPkB,SAAUX,KAEd,mBAAQS,KAAK,SAAb,wBAIf,C,uDC3DM,IAkBIb,EAAS,eAACgB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/LoginForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import React from 'react'\nimport { nanoid } from 'nanoid'\nimport { useState } from 'react'\nimport { logIn } from 'redux/auth/auth-operations'\nimport { useDispatch } from 'react-redux'\n\nexport default function LoginForm() {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const emailInputId = nanoid()\n    const passwordInputId = nanoid()\n\n    const dispatch = useDispatch()\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'email') {\n            return setEmail(value)\n        }\n        if (name === 'password') {\n            return setPassword(value)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        // const data = {\n        //     email,\n        //     password\n        // }\n        dispatch(logIn({ email, password }))\n        setEmail('')\n        setPassword('')\n        // return console.log(data)\n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <label htmlFor={emailInputId}>Email</label>\n                <input\n                    type=\"text\"\n                    id={emailInputId}\n                    name='email'\n                    value={email}\n                    onChange={handleChange}\n                />\n                <label htmlFor={passwordInputId}>Password</label>\n                <input\n                    type=\"text\"\n                    id={passwordInputId}\n                    name='password'\n                    value={password}\n                    onChange={handleChange}\n                />\n                <button type='submit'>Submit</button>\n            </form>\n        </div>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["LoginForm","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","dispatch","useDispatch","handleChange","e","currentTarget","name","value","onSubmit","preventDefault","logIn","htmlFor","type","id","onChange","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}