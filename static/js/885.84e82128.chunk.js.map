{"version":3,"file":"static/js/885.84e82128.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","components/ContactsForm/ContactsForm.jsx","components/ErrorNotify/ErrorNotify.jsx","components/ChangeContactInfoForm/ChangeContactInfoForm.jsx","components/ContactsList/ContactsList.jsx","redux/filter/filter-selectors.js","components/ContactsFilter/ContactsFilter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const getIsLoading = state => state.contacts.isLoading\n\nexport const getItems = state => state.contacts.items\n\nexport const getError = state => state.contacts.error\n\nexport const getFirstLoadingState = state => state.contacts.firstLoading\n\nexport const getDeleteOperationResult = state => state.contacts.operationDelete\n\nexport const getChangeOperationResult = state => state.contacts.operationChange\n\nexport const getFilteredContacts = ({ contacts, filter }) => {   \n  const contactss = contacts.items\n  const filterr = filter\n    if (!filterr) {\n      return contactss\n    }\n\n  const filteredContacts = contactss.filter(({ name, number }) => {\n      const result = name.toLocaleLowerCase().includes(filter.toLocaleLowerCase()) || number.toLocaleLowerCase().includes(filter.toLocaleLowerCase())\n      return result\n    })\n\n    return filteredContacts\n}","import React, { useState } from 'react'\nimport { nanoid } from 'nanoid'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getFilteredContacts, getIsLoading } from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { FormLabel, FormControl, Input, Button } from '@chakra-ui/react';\nimport { toast } from 'react-toastify'\n\nexport default function ContactsForm() {\n    const contacts = useSelector(getFilteredContacts)\n    const loading = useSelector(getIsLoading)\n    const dispatch = useDispatch()\n\n    const [name, setName] = useState('')\n    const [number, setNumber] = useState('')\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'name') {\n            return setName(value)\n        }\n        if (name === 'number') {\n            return setNumber(value)\n        }\n    };\n\n    const contactNameInpuId = nanoid();\n    const contactNumberInputId = nanoid();\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        onAddContact({ name, number })\n    }\n\n    const onAddContact = (contact) => {\n        if (onDuplicatingName(contact)) {\n            return toast('This contact is already on your list.', {\n                position: \"top-right\",\n                type: 'warning',\n                autoClose: 2500,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                theme: \"light\",\n            })\n        }\n\n        dispatch(addContact(contact))\n        setName('')\n        setNumber('')\n\n    }\n\n    const onDuplicatingName = ({ name }) => {\n        const result = contacts.find(contact => {\n            return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n        })\n        return result\n    }\n\n    return (\n        <FormControl as='form' isRequired autoComplete='off' style={{ border: '1px solid #A0AEC0', padding: '10px 20px', borderRadius: '10px' }} onSubmit={handleSubmit}>\n            <FormLabel htmlFor={contactNameInpuId}>Name</FormLabel>\n            <Input type='text' name='name' value={name} id={contactNameInpuId} onChange={handleChange} borderColor='gray.400' placeholder='Ivan Ivanov' />\n            <FormLabel htmlFor={contactNumberInputId}>Number</FormLabel>\n            <Input type='number' name='number' value={number} id={contactNumberInputId} onChange={handleChange} borderColor='gray.400' placeholder='+38 (012) 345 67 89' />\n            <Button colorScheme='blackAlpha' isLoading={loading} loadingText='Adding contact' ml='6' mt='4' type='submit'>Add Contact</Button>\n        </FormControl>\n    )\n}\n\n","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport { getError } from 'redux/contacts/contacts-selectors';\n\nexport default function ErrorNotify() {\n    const error = useSelector(getError)\n\n    return (\n        <>\n            <div style={{ display: 'block', width: '450px', margin: '0 auto', textAlign: 'center', paddingTop: '100px', fontSize: '28px' }}>\n                Oops, something went wrong :( {error}\n            </div>\n        </>\n    )\n}\n","import { Button, FormControl, Input, FormLabel, Flex } from '@chakra-ui/react'\nimport React from 'react'\nimport { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { changeContact } from 'redux/contacts/contacts-operations'\nimport { nanoid } from 'nanoid'\nimport { toast } from 'react-toastify';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors'\n\nexport default function ChangeContactInfoForm({ data, onClose }) {\n    const [name, setName] = useState(data.name)\n    const [number, setNumber] = useState(data.number)\n    const contacts = useSelector(getFilteredContacts)\n    const dispatch = useDispatch()\n\n    const nameInpuId = nanoid();\n    const numberInputId = nanoid();\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'name') {\n            return setName(value)\n        }\n        if (name === 'number') {\n            return setNumber(value)\n        }\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (data.name === name && data.number === number) {\n            toast('You need change name or number', {\n                position: \"top-right\",\n                type: 'info',\n                autoClose: 3000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                theme: \"light\",\n            })\n            return\n        }\n\n        if (onDuplicatingName({ name })) {\n            return toast('This contact is already on your list.', {\n                position: \"top-right\",\n                type: 'warning',\n                autoClose: 2500,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n                theme: \"light\",\n            })\n        }\n\n        dispatch(changeContact({ id: data.id, name, number }))\n        onClose()\n    }\n\n    const onDuplicatingName = ({ name }) => {\n        const result = contacts.find(contact => {\n            return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase()\n        })\n        return result\n    }\n\n    return (\n        <>\n            <FormControl as='form' autoComplete='off' onSubmit={handleSubmit} pb={4} pr={6} pl={6}>\n                <FormLabel htmlFor={nameInpuId}>Name</FormLabel>\n                <Input id={nameInpuId} type=\"text\" name='name' value={name} onChange={handleChange} />\n\n                <FormLabel htmlFor={numberInputId} pt={4}>Number</FormLabel>\n                <Input id={numberInputId} type=\"text\" name='number' value={number} onChange={handleChange} />\n\n                <Flex justify='flex-end' pt={3}>\n                    <Button colorScheme='blue' type='submit' mr={4}>Save</Button>\n                    <Button onClick={onClose}>Close</Button>\n                </Flex>\n            </FormControl>\n        </>\n    )\n}\n","import ErrorNotify from 'components/ErrorNotify/ErrorNotify';\nimport { useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getChangeOperationResult, getDeleteOperationResult, getError, getFilteredContacts, getFirstLoadingState } from 'redux/contacts/contacts-selectors';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contacts-operations';\nimport { Box, SimpleGrid, Avatar, Flex, Progress, IconButton, Modal, ModalOverlay, ModalContent, ModalHeader, useDisclosure } from '@chakra-ui/react';\nimport { PhoneIcon, DeleteIcon, EditIcon } from '@chakra-ui/icons';\nimport ChangeContactInfoForm from 'components/ChangeContactInfoForm/ChangeContactInfoForm';\n\nexport default function ContactsList() {\n    const contacts = useSelector(getFilteredContacts)\n    const firstLoading = useSelector(getFirstLoadingState)\n    const error = useSelector(getError)\n    const deleteOperation = useSelector(getDeleteOperationResult)\n    const changeOperation = useSelector(getChangeOperationResult)\n    const dispatch = useDispatch()\n\n    const { onOpen, isOpen, onClose } = useDisclosure()\n    const [contactData, setContactData] = useState(null)\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    const removeContact = (id) => {\n        const action = deleteContact(id);\n        dispatch(action);\n    }\n\n    const handleChangeBtnClick = (contact) => {\n        setContactData({ ...contact })\n        return onOpen()\n    }\n\n    const handleCloseForm = () => {\n        onClose()\n    }\n\n    return (\n        <>\n            {firstLoading && <Progress w={700} ml='auto' mr='auto' size='xs' isIndeterminate />}\n            {!firstLoading && error && <ErrorNotify />}\n            <SimpleGrid columns={[1, 1, 1, 2]} spacing={6} pt={6} pb={6}>\n                {!error && contacts?.map(({ name, number, id }) => {\n                    return (\n                        <Flex justify='space-between' border='1px solid gray' borderRadius='4px' pt='2' pb='2' pl='4' pr='4' fontSize='xl' key={id}>\n                            <Box>\n                                <Flex align='center'>\n                                    <Avatar size='xs' mr='2' />\n                                    {name}\n                                </Flex>\n                                <Flex align='center' mt={1}>\n                                    <PhoneIcon w={6} h={6} color='gray.600' mr='2' />\n                                    {number}\n                                </Flex>\n                            </Box>\n                            <Flex alignItems='center'>\n                                <IconButton\n                                    aria-label='Change button'\n                                    isLoading={changeOperation === id}\n                                    icon={<EditIcon w={5} h={5} />}\n                                    onClick={() => handleChangeBtnClick({ name, number, id })}>\n\n                                </IconButton>\n                                <IconButton\n                                    aria-label='Delete button'\n                                    isLoading={deleteOperation === id}\n                                    icon={<DeleteIcon w={5} h={5} />}\n                                    onClick={() => removeContact(id)}>\n\n                                </IconButton>\n                            </Flex>\n                        </Flex>\n\n                    )\n                })}\n            </SimpleGrid>\n            <Modal isOpen={isOpen}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>Change Contact</ModalHeader>\n                    <ChangeContactInfoForm data={contactData} onClose={handleCloseForm} />\n                </ModalContent>\n            </Modal>\n        </>\n    )\n}\n","export const getFilter = store => store.filter;","import React from 'react'\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { Flex, Heading, Input } from '@chakra-ui/react';\n\nexport default function ContactsFilter() {\n    const filter = useSelector(getFilter)\n    const dispatch = useDispatch()\n\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'filter') {\n            dispatch(setFilter(value))\n        }\n    };\n    return (\n        <Flex justify='center' align='center' flexDirection='column' pt={4} pb={4}>\n            <Heading as='h2' textAlign='center'>Write first latter of name to quick search</Heading>\n            <Input w={500} mt='4' borderColor='gray.400' type=\"text\" name='filter' value={filter} placeholder='Enter some name ...' onChange={handleChange} />\n        </Flex >\n    )\n}","import React from 'react'\nimport ContactsForm from '../components/ContactsForm/ContactsForm';\nimport ContactsList from '../components/ContactsList/ContactsList';\nimport ContactsFilter from '../components/ContactsFilter/ContactsFilter';\nimport { Box } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { getItems } from 'redux/contacts/contacts-selectors';\n\nexport default function Contacts() {\n    const contacts = useSelector(getItems)\n\n    return (\n        <>\n            <Box p={4}>\n                <ContactsForm />\n            </Box>\n            <Box>\n                {contacts.length > 0 && <ContactsFilter />}\n                <ContactsList />\n            </Box>\n        </>\n    )\n}\n"],"names":["getIsLoading","state","contacts","isLoading","getItems","items","getError","error","getFirstLoadingState","firstLoading","getDeleteOperationResult","operationDelete","getChangeOperationResult","operationChange","getFilteredContacts","filter","contactss","name","number","toLocaleLowerCase","includes","ContactsForm","useSelector","loading","dispatch","useDispatch","useState","setName","setNumber","handleChange","e","currentTarget","value","contactNameInpuId","nanoid","contactNumberInputId","onAddContact","contact","onDuplicatingName","toast","position","type","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","addContact","find","as","isRequired","autoComplete","style","border","padding","borderRadius","onSubmit","preventDefault","htmlFor","id","onChange","borderColor","placeholder","colorScheme","loadingText","ml","mt","ErrorNotify","display","width","margin","textAlign","paddingTop","fontSize","ChangeContactInfoForm","data","onClose","nameInpuId","numberInputId","changeContact","pb","pr","pl","pt","justify","mr","onClick","ContactsList","deleteOperation","changeOperation","useDisclosure","onOpen","isOpen","contactData","setContactData","useEffect","fetchContacts","w","size","isIndeterminate","columns","spacing","map","align","h","color","alignItems","icon","action","deleteContact","removeContact","getFilter","store","ContactsFilter","flexDirection","setFilter","Contacts","p","length"],"sourceRoot":""}