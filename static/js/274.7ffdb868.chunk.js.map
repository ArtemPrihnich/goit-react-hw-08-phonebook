{"version":3,"file":"static/js/274.7ffdb868.chunk.js","mappings":"gSAMe,SAASA,IACpB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,cAAlBd,EAAR,EAAQA,KAAMe,EAAd,EAAcA,MACd,MAAa,SAATf,EACOC,EAAQc,GAEN,UAATf,EACOG,EAASY,GAEP,aAATf,EACOK,EAAYU,QADvB,CAGH,EAeD,OACI,SAAC,KAAD,CAAKC,KAAM,IAAKC,GAAG,OAAOC,GAAG,OAAOC,GAAG,KAAKC,GAAG,KAA/C,UACI,UAAC,KAAD,CAAaC,GAAG,OAAOC,SAfV,SAACT,GAClBA,EAAEU,iBAMFb,GAASc,EAAAA,EAAAA,IAAa,CAAExB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,KACrCH,EAAQ,IACRE,EAAS,IACTE,EAAY,GACf,EAIsDoB,MAAO,CAAEC,OAAQ,oBAAqBC,QAAS,YAAaC,aAAc,QAAzH,WACI,SAAC,KAAD,CAAWC,QAASvB,EAApB,mBACA,SAAC,KAAD,CAAOwB,YAAU,EAACC,KAAK,OAAO/B,KAAK,OAAOgC,SAAUpB,EAAcqB,GAAI3B,KACtE,SAAC,KAAD,CAAWuB,QAASrB,EAApB,oBACA,SAAC,KAAD,CAAOsB,YAAU,EAACC,KAAK,QAAQ/B,KAAK,QAAQgC,SAAUpB,EAAcqB,GAAIzB,KACxE,SAAC,KAAD,CAAWqB,QAASpB,EAApB,uBACA,SAAC,KAAD,CAAOqB,YAAU,EAACC,KAAK,WAAW/B,KAAK,WAAWgC,SAAUpB,EAAcqB,GAAIxB,KAC9E,SAAC,KAAD,CAAMyB,QAAQ,SAAd,UACI,SAAC,KAAD,CAAQC,EAAG,IAAKC,YAAY,aAAaC,GAAG,IAAIN,KAAK,SAArD,8BAKnB,C","sources":["pages/RegisterForm.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { nanoid } from 'nanoid'\nimport { registerUser } from 'redux/auth/auth-operations'\nimport { FormControl, Input, FormLabel, Button, Box, Flex } from '@chakra-ui/react'\n\nexport default function RegisterForm() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const nameInputId = nanoid()\n    const emailInputId = nanoid()\n    const passwordInputId = nanoid()\n\n    const dispatch = useDispatch()\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'name') {\n            return setName(value)\n        }\n        if (name === 'email') {\n            return setEmail(value)\n        }\n        if (name === 'password') {\n            return setPassword(value)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        // const data = {\n        //     name,\n        //     email,\n        //     password\n        // }\n        dispatch(registerUser({ name, email, password }))\n        setName('')\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <Box maxW={700} ml='auto' mr='auto' pt='10' pb='10'>\n            <FormControl as='form' onSubmit={handleSubmit} style={{ border: '1px solid #A0AEC0', padding: '10px 20px', borderRadius: '10px' }}>\n                <FormLabel htmlFor={nameInputId}>Name</FormLabel>\n                <Input isRequired type='text' name='name' onChange={handleChange} id={nameInputId}></Input>\n                <FormLabel htmlFor={emailInputId}>Email</FormLabel>\n                <Input isRequired type='email' name='email' onChange={handleChange} id={emailInputId}></Input>\n                <FormLabel htmlFor={passwordInputId}>Password</FormLabel>\n                <Input isRequired type='password' name='password' onChange={handleChange} id={passwordInputId}></Input>\n                <Flex justify='center'>\n                    <Button w={200} colorScheme='blackAlpha' mt='6' type='submit'> Register </Button>\n                </Flex>\n            </FormControl>\n        </Box>\n    )\n}\n\n"],"names":["RegisterForm","useState","name","setName","email","setEmail","password","setPassword","nameInputId","nanoid","emailInputId","passwordInputId","dispatch","useDispatch","handleChange","e","currentTarget","value","maxW","ml","mr","pt","pb","as","onSubmit","preventDefault","registerUser","style","border","padding","borderRadius","htmlFor","isRequired","type","onChange","id","justify","w","colorScheme","mt"],"sourceRoot":""}