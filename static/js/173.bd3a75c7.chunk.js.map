{"version":3,"file":"static/js/173.bd3a75c7.chunk.js","mappings":"0SAOe,SAASA,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAElBE,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GAClB,MAAwBA,EAAEC,cAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,MAAa,UAATD,EACOd,EAASe,GAEP,aAATD,EACOZ,EAAYa,QADvB,CAGH,EASD,OACI,SAAC,KAAD,CAAKC,KAAM,IAAKC,GAAG,OAAOC,GAAG,OAAOC,GAAG,KAAKC,GAAG,KAA/C,UACI,UAAC,KAAD,CAAaC,GAAG,OAAOC,aAAa,MAAMC,SAT7B,SAACX,GAClBA,EAAEY,iBACFf,GAASgB,EAAAA,EAAAA,IAAM,CAAE1B,MAAAA,EAAOE,SAAAA,KACxBD,EAAS,IACTE,EAAY,GACf,EAIyEwB,MAAO,CAAEC,OAAQ,oBAAqBC,QAAS,YAAaC,aAAc,QAA5I,WACI,SAAC,KAAD,CAAWC,QAAS3B,EAApB,oBACA,SAAC,KAAD,CAAO4B,YAAU,EAACC,KAAK,QAAQlB,KAAK,QAAQmB,SAAUtB,EAAcuB,GAAI/B,KACxE,SAAC,KAAD,CAAW2B,QAASzB,EAApB,uBACA,SAAC,KAAD,CAAO0B,YAAU,EAACC,KAAK,WAAWlB,KAAK,WAAWmB,SAAUtB,EAAcuB,GAAI7B,KAC9E,SAAC,KAAD,CAAM8B,QAAQ,SAAd,UACI,SAAC,KAAD,CAAQ7B,UAAWA,EAAW8B,EAAG,IAAKC,YAAY,aAAaC,GAAG,IAAIN,KAAK,SAA3E,2BAKnB,C","sources":["pages/LoginForm.jsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { nanoid } from 'nanoid'\nimport { logIn } from 'redux/auth/auth-operations'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { FormControl, Input, FormLabel, Button, Box, Flex } from '@chakra-ui/react'\nimport { getIsLoading } from 'redux/auth/auth-selectors'\n\nexport default function LoginForm() {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    const emailInputId = nanoid()\n    const passwordInputId = nanoid()\n\n    const isLoading = useSelector(getIsLoading)\n    const dispatch = useDispatch()\n\n    const handleChange = (e) => {\n        const { name, value } = e.currentTarget\n        if (name === 'email') {\n            return setEmail(value)\n        }\n        if (name === 'password') {\n            return setPassword(value)\n        }\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        dispatch(logIn({ email, password }))\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n        <Box maxW={700} ml='auto' mr='auto' pt='10' pb='10'>\n            <FormControl as='form' autoComplete='off' onSubmit={handleSubmit} style={{ border: '1px solid #A0AEC0', padding: '10px 20px', borderRadius: '10px' }}>\n                <FormLabel htmlFor={emailInputId}>Email</FormLabel>\n                <Input isRequired type='email' name='email' onChange={handleChange} id={emailInputId}></Input>\n                <FormLabel htmlFor={passwordInputId}>Password</FormLabel>\n                <Input isRequired type='password' name='password' onChange={handleChange} id={passwordInputId}></Input>\n                <Flex justify='center'>\n                    <Button isLoading={isLoading} w={200} colorScheme='blackAlpha' mt='6' type='submit'> Login </Button>\n                </Flex>\n            </FormControl>\n        </Box>\n    )\n}\n"],"names":["LoginForm","useState","email","setEmail","password","setPassword","emailInputId","nanoid","passwordInputId","isLoading","useSelector","getIsLoading","dispatch","useDispatch","handleChange","e","currentTarget","name","value","maxW","ml","mr","pt","pb","as","autoComplete","onSubmit","preventDefault","logIn","style","border","padding","borderRadius","htmlFor","isRequired","type","onChange","id","justify","w","colorScheme","mt"],"sourceRoot":""}